{"version":3,"sources":["styles/AccountInfo.module.scss","components/Account/EditPassword.js","components/Account/EditName.js","components/Account/EditEmail.js","components/Account/EditCard.js","components/Account/EditBillingInfomration.js","components/Account/AccountInformation.js","components/Account/BillingInformation.js","components/Account/AccountInfo.js"],"names":["module","exports","EditPassword","observer","props","store","useContext","AccountStore","useState","newPassword","setNewPassword","passwordConfirm","setPasswordConfirm","renderForm","setRenderForm","handleChange","event","target","id","value","preventDefault","handleSubmit","a","setPassword","className","onClick","poochInput","type","placeholder","onChange","href","disabled","length","EditName","set","style","width","margin","EditEmail","CardForm","injectStripe","onSubmit","stripe","createToken","then","payload","updatePaymentBilling","toJS","renderCardForm","console","log","stripeElementsInput","fontSize","base","color","backgroundColor","fontWeight","letterSpacing","fontFamily","invalid","Link","textAlign","EditCard","apiKey","REACT_APP_STRIPE_KEY","fonts","cssSrc","customer","billingInfo","name","cardBrand","cardLast4","cardExpMonth","cardExpYear","EditBilling","renderBilling","setRenderBillling","showForm","updateBilling","marginBottom","height","states","map","state","abbreviation","key","accountSubSectionHeader","address1","address2","city","zipcode","AccountInformation","setShowForm","handleForm","updateUser","background","padding","accountSectionHeader","email","addr","e","newEmail","test","n","firstName","lastName","validateForm","BillingInformation","AccountInfo"],"mappings":"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","file":"static/js/4.eb972655.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"accountPageHeader\":\"AccountInfo_accountPageHeader__3PT-I\",\"accountSectionHeader\":\"AccountInfo_accountSectionHeader__u8Du1\",\"accountSubSectionHeader\":\"AccountInfo_accountSubSectionHeader__rUWSb\",\"Link\":\"AccountInfo_Link__1OAI7\",\"poochInput\":\"AccountInfo_poochInput__1AR4z\",\"poochButton\":\"AccountInfo_poochButton__3soeJ\",\"stripeElementsInput\":\"AccountInfo_stripeElementsInput__21gKf\",\"StripeElement\":\"AccountInfo_StripeElement__1q-TZ\"};","import React, { useContext, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport AccountStore from '../../stores/AccountStore'\nimport { poochInput } from '../../styles/AccountInfo.module.scss'\n\n/**\n * EditPassword observes the AccountStore\n * It should not change the state of AccountStore.\n * It should update the password of a user when they are logged in\n * So It may need to be aware of a session\n *\n */\n\nexport const EditPassword = observer(props => {\n  const store = useContext(AccountStore)\n  //console.log(props)\n\n  const [newPassword, setNewPassword] = useState('')\n  const [passwordConfirm, setPasswordConfirm] = useState('')\n  const [renderForm, setRenderForm] = useState(false)\n\n  const validateForm = () => {\n    return (\n      newPassword === passwordConfirm &&\n      newPassword.length !== 0 &&\n      passwordConfirm.length !== 0\n    )\n  }\n\n  const handleChange = event => {\n    if (event.target.id === 'editPassword') {\n      setNewPassword(event.target.value)\n    } else if (event.target.id === 'editPasswordConfirm') {\n      setPasswordConfirm(event.target.value)\n    } else if (event.target.id === 'changePassword') {\n      event.preventDefault()\n      setRenderForm(!renderForm)\n    }\n  }\n\n  const handleSubmit = async event => {\n    event.preventDefault()\n    await store.setPassword(newPassword)\n    setRenderForm(false)\n    //window.location.hash = '/';\n  }\n\n  return (\n    <div>\n      {!renderForm && (\n        <button className=\"a11y\" onClick={handleChange} id=\"changePassword\">\n          {' '}\n          Change Password\n        </button>\n      )}\n      {renderForm && (\n        <div>\n          <div className=\"field\">\n            <p className=\"control\">\n              <input\n                className={'input ' + poochInput}\n                type=\"password\"\n                id=\"editPassword\"\n                placeholder=\"New Password\"\n                onChange={handleChange}\n              />\n            </p>\n          </div>\n          <div className=\"field\">\n            <p className=\"control\">\n              <input\n                className={'input ' + poochInput}\n                type=\"password\"\n                id=\"editPasswordConfirm\"\n                placeholder=\"Re-Enter Password\"\n                onChange={handleChange}\n              />\n            </p>\n            <div />\n          </div>\n          <div className=\"field is-grouped\">\n            <p className=\"control is-expanded\">\n              {/* eslint-disable-next-line */}\n              <button\n                href=\"#\"\n                className=\"button a11y\"\n                onClick={handleChange}\n                id=\"changePassword\"\n              >\n                Cancel\n              </button>\n            </p>\n            <p className=\"control\">\n              <button\n                className=\"button btn-orange\"\n                disabled={!validateForm()}\n                type=\"submit\"\n                onClick={handleSubmit}\n              >\n                Update Password\n              </button>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n})\n","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react'\nimport AccountStore from '../../stores/AccountStore'\nimport { poochInput } from '../../styles/AccountInfo.module.scss'\n\n/**\n * EditName observes AccountStore\n * Edits Only the name portion of the account edit\n *\n */\n\nexport const EditName = observer(props => {\n  const store = useContext(AccountStore)\n\n  const handleChange = async event => {\n    store.set(event.target.id, event.target.value)\n  }\n\n  return (\n    <div style={{ width: '100%', margin: '0 auto' }}>\n      <div className=\"field-body\">\n        <div className=\"field\">\n          <p className=\"control\">\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"firstName\"\n              placeholder=\"First Name\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field\">\n          <p className=\"control\">\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"lastName\"\n              placeholder=\"Last Name\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n})\n","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react'\nimport AccountStore from '../../stores/AccountStore'\nimport { poochInput } from '../../styles/AccountInfo.module.scss'\n\n/**\n * Edits email and also updates the rest of the fields\n * Field that updates the email field.\n *\n */\n\nexport const EditEmail = observer(props => {\n  const store = useContext(AccountStore)\n\n  const handleChange = async event => {\n    store.set(event.target.id, event.target.value)\n  }\n\n  return (\n    <div className=\"field\">\n      <p className=\"control\">\n        <input\n          className={'input ' + poochInput}\n          type=\"text\"\n          id=\"newEmail\"\n          placeholder=\"Email\"\n          onChange={handleChange}\n        />\n      </p>\n    </div>\n  )\n})\n","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react'\nimport AccountStore from '../../stores/AccountStore'\nimport { toJS } from 'mobx'\nimport { REACT_APP_STRIPE_KEY } from '../../shop-config'\nimport {\n  CardElement,\n  Elements,\n  StripeProvider,\n  injectStripe,\n} from 'react-stripe-elements'\n\nimport {\n  Link,\n  poochInput,\n  stripeElementsInput,\n} from '../../styles/AccountInfo.module.scss'\n\n/**\n * Edit Card Observes AccountStore\n * Uses Stripe Elements to tokenize the entered card.\n * After Submision the card token is then processed by the `store.updatePaymentBilling`\n * and then the result is returned by `<Notify/>`\n *\n */\nconst createOptionsElements = () => {\n  return [\n    {\n      cssSrc: 'https://fonts.googleapis.com/css?family=Rubik&display=swap',\n    },\n  ]\n}\n\nconst createOptions = (fontSize, padding) => {\n  return {\n    style: {\n      base: {\n        fontSize: '14px',\n        color: '#495057',\n        backgroundColor: '#fff',\n        fontWeight: '400',\n        letterSpacing: '0.025em',\n        fontFamily: 'Rubik, san-serif',\n        '::placeholder': {\n          color: '#aab7c4',\n        },\n      },\n      invalid: {\n        color: '#9e2146',\n      },\n    },\n  }\n}\n\nconst CardForm = injectStripe(props => {\n  const store = useContext(AccountStore)\n  const handleSubmit = event => {\n    event.preventDefault()\n    if (props.stripe) {\n      props.stripe.createToken().then(payload =>\n        store.updatePaymentBilling(payload).then(() => {\n          store.set('renderCardForm', !toJS(store.renderCardForm))\n        })\n      )\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\")\n    }\n  }\n\n  const cancel = event => {\n    event.preventDefault()\n    store.set('renderCardForm', !toJS(store.renderCardForm))\n  }\n  const handleChange = event => {\n    store.set(event.target.id, event.target.value)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>Name on Card</label>\n      <div className=\"field-body\">\n        <div className=\"field\">\n          <p className=\"control\">\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"firstName\"\n              placeholder=\"First Name\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field\">\n          <p className=\"control\">\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"lastName\"\n              placeholder=\"Last Name\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n      </div>\n      <div className=\"field\">\n        <label>\n          Card Details\n          <CardElement\n            className={stripeElementsInput}\n            {...createOptions(props.fontSize)}\n          />\n        </label>\n      </div>\n      <div className=\"field is-grouped\">\n        <p className=\"control is-expanded\">\n          <button className={Link} onClick={cancel} href=\"#\">\n            Cancel\n          </button>\n        </p>\n        <p className=\"control\" style={{ textAlign: 'right' }}>\n          <button className=\"button btn-orange\" type=\"submit\">\n            Update\n          </button>\n        </p>\n      </div>\n    </form>\n  )\n})\n\nexport const EditCard = observer(props => {\n  const fontSize = '14px'\n  const store = useContext(AccountStore)\n  const showForm = event => {\n    event.preventDefault()\n    store.set('renderCardForm', !toJS(store.renderCardForm))\n  }\n  if (!toJS(store.renderCardForm)) {\n    if (store.customer.billingInfo) {\n      return (\n        <div>\n          <p>{store.customer.billingInfo.name}</p>\n          <p>\n            {store.customer.billingInfo.cardBrand} ending in{' '}\n            {store.customer.billingInfo.cardLast4}\n          </p>\n          <p>\n            Expires{' '}\n            {store.customer.billingInfo &&\n              store.customer.billingInfo.cardExpMonth}\n            /{store.customer.billingInfo.cardExpYear}\n          </p>\n\n          <button className=\"a11y\" onClick={showForm}>\n            Update Card\n          </button>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No Billing Address</p>\n        </div>\n      )\n    }\n  } else {\n    return (\n      <div className={stripeElementsInput}>\n        <StripeProvider apiKey={REACT_APP_STRIPE_KEY}>\n          <Elements fonts={createOptionsElements()}>\n            <CardForm fontSize={fontSize} />\n          </Elements>\n        </StripeProvider>\n      </div>\n    )\n  }\n})\n","import React, { useContext, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { toJS } from 'mobx'\nimport AccountStore from '../../stores/AccountStore'\nimport states from '../../states.json'\nimport {\n  accountSubSectionHeader,\n  Link,\n  poochInput,\n} from '../../styles/AccountInfo.module.scss'\n\n/**\n * EditBilling Observes AccountStore\n * When `Billing Address` is clicked EditBilling revieals a form\n * that updates the billing address when submited. `store.updateBilling()` is called\n * and a `<Notify/>` message is returned on a result.\n *\n */\n\nexport const EditBilling = observer(props => {\n  const store = useContext(AccountStore)\n  const [renderBilling, setRenderBillling] = useState(false)\n\n  //state\n  const showForm = event => {\n    event.preventDefault()\n    setRenderBillling(!renderBilling)\n  }\n\n  const handleChange = event => {\n    store.set(event.target.id, event.target.value)\n  }\n  const updateBilling = async event => {\n    await store.updateBilling()\n    setRenderBillling(!renderBilling)\n  }\n\n  if (!renderBilling) {\n    return (\n      <div>\n        <p className={accountSubSectionHeader}>Billing Address</p>\n        {console.log(store.customer)}\n        {store.customer && (\n          <span>\n            <p>{toJS(store.customer.billingInfo.name)}</p>\n            <p>{toJS(store.customer.billingInfo.address1)}</p>\n            <p>{toJS(store.customer.billingInfo.address2)}</p>\n            <p>\n              {toJS(store.customer.billingInfo.city)}{' '}\n              {toJS(store.customer.billingInfo.state)}{' '}\n              {toJS(store.customer.billingInfo.zipcode)}\n            </p>\n          </span>\n        )}\n        {/*eslint-disable-next-line*/}\n        <a className={Link} onClick={showForm} href=\"\">\n          Edit Billing Address\n        </a>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <div className=\"field-body\" style={{ marginBottom: '.5rem' }}>\n          <div className=\"field\">\n            <p className=\"control\">\n              <lable>First Name</lable>\n              <input\n                className={'input ' + poochInput}\n                type=\"text\"\n                id=\"firstName\"\n                placeholder=\"First Name\"\n                onChange={handleChange}\n              />\n            </p>\n          </div>\n          <div className=\"field\">\n            <p className=\"control\">\n              <lable>Last Name</lable>\n              <input\n                className={'input ' + poochInput}\n                type=\"text\"\n                id=\"lastName\"\n                placeholder=\"Last Name\"\n                onChange={handleChange}\n              />\n            </p>\n          </div>\n        </div>\n        <div className=\"field\">\n          <p className=\"control\">\n            <lable>Address 1</lable>\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"address1\"\n              placeholder=\"Address 1\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field\">\n          <lable>Address 2</lable>\n          <p className=\"control\">\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"address2\"\n              placeholder=\"Address 2\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field-body\">\n          <div className=\"field\">\n            <p className=\"control\">\n              <lable>State</lable>\n              <select\n                className={poochInput}\n                id=\"state\"\n                placeholder=\"State\"\n                onChange={handleChange}\n                style={{ height: '54px' }}\n              >\n                {states.map(state => (\n                  <option value={state.abbreviation} key={state.abbreviation}>\n                    {state.name}\n                  </option>\n                ))}\n              </select>\n            </p>\n          </div>\n          <div className=\"field\">\n            <lable>City</lable>\n            <p className=\"control\">\n              <input\n                className={'input ' + poochInput}\n                type=\"text\"\n                id=\"city\"\n                placeholder=\"City\"\n                onChange={handleChange}\n              />\n            </p>\n          </div>\n        </div>\n        <div className=\"field\">\n          <p className=\"control\">\n            <lable>Zip</lable>\n            <input\n              className={'input ' + poochInput}\n              type=\"zip\"\n              id=\"zip\"\n              placeholder=\"Zip\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field is-grouped\">\n          <p className=\"control is-expanded\">\n            <button className={Link} onClick={showForm} href=\"\">\n              Cancel\n            </button>\n          </p>\n          <p className=\"control\" style={{ textAlign: 'right' }}>\n            <button\n              className=\"button btn-orange\"\n              type=\"submit\"\n              onClick={updateBilling}\n            >\n              Update Billing\n            </button>\n          </p>\n        </div>\n      </div>\n    )\n  }\n})\n","import React, { useContext, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport AccountStore from '../../stores/AccountStore'\nimport { EditPassword } from './EditPassword'\nimport { EditName } from './EditName'\nimport { EditEmail } from './EditEmail'\nimport {\n  accountSectionHeader,\n  accountSubSectionHeader,\n  Link,\n} from '../../styles/AccountInfo.module.scss'\n\n/**\n * AccountInformation observes the AccountStore\n * Displays the current account information\n * Contains the actions to the Billing Address, Card On File\n * Account Information Edit, Change Password, forms.\n *\n */\n\nexport const AccountInformation = observer(props => {\n  const store = useContext(AccountStore)\n  const [showForm, setShowForm] = useState(false)\n  const handleForm = event => {\n    event.preventDefault()\n    setShowForm(!showForm)\n  }\n\n  const handleSubmit = async event => {\n    event.preventDefault()\n    await store.updateUser()\n    setShowForm(false)\n  }\n\n  const validateEmail = addr => {\n    //eslint-disable-next-line\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(addr)) {\n      return true\n    }\n    return false\n  }\n\n  const validateForm = () => {\n    //let e = store.newEmail.length > 0\n    let e = validateEmail(store.newEmail)\n    let n = store.firstName.length > 0 && store.lastName.length > 0\n    return e && n\n  }\n\n  return (\n    <div className=\"box\" style={{ background: '#f2f2f2', padding: '1.5em' }}>\n      <h3 className={accountSectionHeader}>Account Information</h3>\n      <div className=\"columns\">\n        <div className=\"column\">\n          {!showForm && (\n            <div>\n              <div className=\"columns\">\n                <div className=\"column\">\n                  <p className={accountSubSectionHeader}>Name</p>\n                  <p> {store.customer && store.customer.name} </p>\n                </div>\n                <div className=\"column\">\n                  <p className={accountSubSectionHeader}>Email</p>\n                  <p>{store.customer && store.customer.email}</p>\n                </div>\n              </div>\n              <button className=\"a11y\" onClick={handleForm} href=\"#\">\n                {' '}\n                Edit\n              </button>\n            </div>\n          )}\n          {showForm && (\n            <div>\n              <div>\n                <p className={accountSubSectionHeader}>Name</p>\n                <EditName />\n                <p className={accountSubSectionHeader}>Email</p>\n                <EditEmail />\n              </div>\n              <div className=\"field is-grouped\" style={{ margin: '1em 0 0 0' }}>\n                <p className=\"control is-expanded\">\n                  {/*eslint-disable-next-line */}\n                  <a href=\"#\" className={Link} onClick={handleForm} href=\"#\">\n                    Cancel\n                  </a>\n                </p>\n                <p className=\"control\">\n                  <button\n                    className=\"button btn-orange\"\n                    disabled={!validateForm()}\n                    type=\"submit\"\n                    onClick={handleSubmit}\n                  >\n                    UPDATE\n                  </button>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"column\">\n          <p className={accountSubSectionHeader}>Password</p>\n          <EditPassword\n            showForm={() => {\n              showForm()\n            }}\n          />{' '}\n        </div>\n      </div>\n    </div>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { EditCard } from './EditCard'\nimport {\n  accountSectionHeader,\n  accountSubSectionHeader,\n} from '../../styles/AccountInfo.module.scss'\nimport { EditBilling } from './EditBillingInfomration'\n\n/**\n * BillingInformation\n * Contains the Lower section of Account Info\n * Allows the user to Edit Billing Address and the card on file.\n */\n\nexport const BillingInformation = observer(props => {\n  return (\n    <div className=\"box\" style={{ background: '#f2f2f2', padding: '1.5em' }}>\n      <h3 className={accountSectionHeader}>Billing Information</h3>\n      <div className=\"columns\">\n        <div className=\"column\">\n          <EditBilling />\n        </div>\n        <div className=\"column\">\n          <p className={accountSubSectionHeader}>Card on File</p>\n          <EditCard />\n        </div>\n      </div>\n    </div>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { AccountInformation } from './AccountInformation'\nimport { BillingInformation } from './BillingInformation'\n/**\n * AccountInfo\n *\n * This component Composts `AccountInformation` and `BillingInformation`.\n * Please refer to each component for their individual documentation.\n *\n */\n\nexport const AccountInfo = observer(props => {\n  return (\n    <div>\n      <AccountInformation />\n      <br />\n      <BillingInformation />\n    </div>\n  )\n})\n"],"sourceRoot":""}