{"version":3,"sources":["components/Account/LoginForm.js"],"names":["LoginForm","observer","store","useContext","AccountStore","useState","error","setError","email","setEmail","password","setPassword","login","event","a","preventDefault","length","window","location","hash","setTimeout","onSubmit","style","maxWidth","margin","className","marginBottom","type","id","placeholder","onChange","target","value"],"mappings":"oPAaaA,EAAYC,aAAS,WAChC,IAAMC,EAAQC,qBAAWC,KADa,EAGZC,oBAAS,GAHG,mBAG/BC,EAH+B,KAGxBC,EAHwB,OAIZF,mBAAS,IAJG,mBAI/BG,EAJ+B,KAIxBC,EAJwB,OAKNJ,mBAAS,IALH,mBAK/BK,EAL+B,KAKrBC,EALqB,KAOhCC,EAAK,uCAAG,WAAMC,GAAN,SAAAC,EAAA,yDACZD,EAAME,mBACFP,EAAMQ,OAAS,GAAKN,EAASM,OAAS,GAF9B,gCAGSd,EAAMU,MAAMJ,EAAOE,GAH5B,gBAKRO,OAAOC,SAASC,KAAO,cALf,OAQZZ,GAAS,GACTa,YAAW,WACTb,GAAS,KACR,KAXS,2CAAH,sDAcX,OACE,0BAAMc,SAAUT,EAAOU,MAAO,CAAEC,SAAU,QAASC,OAAQ,SACxDlB,GACC,uBAAGmB,UAAU,kBAAkBH,MAAO,CAAEI,aAAc,SAAtD,6BAIF,yBAAKD,UAAU,SACb,2BACEA,UAAU,QACVE,KAAK,QACLC,GAAG,QACHC,YAAY,sBACZC,SAAU,SAAAjB,GAAK,OAAIJ,EAASI,EAAMkB,OAAOC,WAG7C,yBAAKP,UAAU,SACb,2BACEA,UAAU,QACVE,KAAK,WACLC,GAAG,WACHC,YAAY,WACZC,SAAU,SAAAjB,GAAK,OAAIF,EAAYE,EAAMkB,OAAOC,WAGhD,2BAAOL,KAAK,SAASK,MAAM,QAAQP,UAAU,uBAKpCzB","file":"static/js/46.0ee7af19.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport AccountStore from '../../stores/AccountStore'\n\n/**\n * LoginForm observes AccountStore\n * LoginForm has it's own state for error, email, password fields.\n * Once all error states are met users will hit the login button and call `store.login()`\n * to access their account.\n *\n */\n\nexport const LoginForm = observer(() => {\n  const store = useContext(AccountStore)\n\n  const [error, setError] = useState(false)\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  const login = async event => {\n    event.preventDefault()\n    if (email.length > 0 && password.length > 0) {\n      const auth = await store.login(email, password)\n      if (auth) {\n        window.location.hash = '/myaccount'\n      }\n    }\n    setError(true)\n    setTimeout(() => {\n      setError(false)\n    }, 3000)\n  }\n\n  return (\n    <form onSubmit={login} style={{ maxWidth: '400px', margin: 'auto' }}>\n      {error && (\n        <p className=\"has-text-danger\" style={{ marginBottom: '15px' }}>\n          Invalid Email or Password\n        </p>\n      )}\n      <div className=\"field\">\n        <input\n          className=\"input\"\n          type=\"email\"\n          id=\"email\"\n          placeholder=\"Enter Email Address\"\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n      <div className=\"field\">\n        <input\n          className=\"input\"\n          type=\"password\"\n          id=\"password\"\n          placeholder=\"Password\"\n          onChange={event => setPassword(event.target.value)}\n        />\n      </div>\n      <input type=\"submit\" value=\"Login\" className=\"button is-info\" />\n    </form>\n  )\n})\n\nexport default LoginForm\n"],"sourceRoot":""}