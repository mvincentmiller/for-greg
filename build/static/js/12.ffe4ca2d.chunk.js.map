{"version":3,"sources":["styles/AccountInfo.module.scss","components/Account/EditCard.js","components/Account/EditBillingInfomration.js","components/Account/BillingInformation.js"],"names":["module","exports","CardForm","injectStripe","props","store","useContext","AccountStore","handleChange","event","set","target","id","value","onSubmit","preventDefault","stripe","createToken","then","payload","updatePaymentBilling","toJS","renderCardForm","console","log","className","poochInput","type","placeholder","onChange","stripeElementsInput","fontSize","style","base","color","backgroundColor","fontWeight","letterSpacing","fontFamily","invalid","Link","onClick","href","textAlign","EditCard","observer","apiKey","REACT_APP_STRIPE_KEY","fonts","cssSrc","customer","billingInfo","name","cardBrand","cardLast4","cardExpMonth","cardExpYear","EditBilling","useState","renderBilling","setRenderBillling","showForm","updateBilling","a","marginBottom","height","states","map","state","abbreviation","key","accountSubSectionHeader","address1","address2","city","zipcode","BillingInformation","background","padding","accountSectionHeader"],"mappings":"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","file":"static/js/12.ffe4ca2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"accountPageHeader\":\"AccountInfo_accountPageHeader__3PT-I\",\"accountSectionHeader\":\"AccountInfo_accountSectionHeader__u8Du1\",\"accountSubSectionHeader\":\"AccountInfo_accountSubSectionHeader__rUWSb\",\"Link\":\"AccountInfo_Link__1OAI7\",\"poochInput\":\"AccountInfo_poochInput__1AR4z\",\"poochButton\":\"AccountInfo_poochButton__3soeJ\",\"stripeElementsInput\":\"AccountInfo_stripeElementsInput__21gKf\",\"StripeElement\":\"AccountInfo_StripeElement__1q-TZ\"};","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react'\nimport AccountStore from '../../stores/AccountStore'\nimport { toJS } from 'mobx'\nimport { REACT_APP_STRIPE_KEY } from '../../shop-config'\nimport {\n  CardElement,\n  Elements,\n  StripeProvider,\n  injectStripe,\n} from 'react-stripe-elements'\n\nimport {\n  Link,\n  poochInput,\n  stripeElementsInput,\n} from '../../styles/AccountInfo.module.scss'\n\n/**\n * Edit Card Observes AccountStore\n * Uses Stripe Elements to tokenize the entered card.\n * After Submision the card token is then processed by the `store.updatePaymentBilling`\n * and then the result is returned by `<Notify/>`\n *\n */\nconst createOptionsElements = () => {\n  return [\n    {\n      cssSrc: 'https://fonts.googleapis.com/css?family=Rubik&display=swap',\n    },\n  ]\n}\n\nconst createOptions = (fontSize, padding) => {\n  return {\n    style: {\n      base: {\n        fontSize: '14px',\n        color: '#495057',\n        backgroundColor: '#fff',\n        fontWeight: '400',\n        letterSpacing: '0.025em',\n        fontFamily: 'Rubik, san-serif',\n        '::placeholder': {\n          color: '#aab7c4',\n        },\n      },\n      invalid: {\n        color: '#9e2146',\n      },\n    },\n  }\n}\n\nconst CardForm = injectStripe(props => {\n  const store = useContext(AccountStore)\n  const handleSubmit = event => {\n    event.preventDefault()\n    if (props.stripe) {\n      props.stripe.createToken().then(payload =>\n        store.updatePaymentBilling(payload).then(() => {\n          store.set('renderCardForm', !toJS(store.renderCardForm))\n        })\n      )\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\")\n    }\n  }\n\n  const cancel = event => {\n    event.preventDefault()\n    store.set('renderCardForm', !toJS(store.renderCardForm))\n  }\n  const handleChange = event => {\n    store.set(event.target.id, event.target.value)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>Name on Card</label>\n      <div className=\"field-body\">\n        <div className=\"field\">\n          <p className=\"control\">\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"firstName\"\n              placeholder=\"First Name\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field\">\n          <p className=\"control\">\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"lastName\"\n              placeholder=\"Last Name\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n      </div>\n      <div className=\"field\">\n        <label>\n          Card Details\n          <CardElement\n            className={stripeElementsInput}\n            {...createOptions(props.fontSize)}\n          />\n        </label>\n      </div>\n      <div className=\"field is-grouped\">\n        <p className=\"control is-expanded\">\n          <button className={Link} onClick={cancel} href=\"#\">\n            Cancel\n          </button>\n        </p>\n        <p className=\"control\" style={{ textAlign: 'right' }}>\n          <button className=\"button btn-orange\" type=\"submit\">\n            Update\n          </button>\n        </p>\n      </div>\n    </form>\n  )\n})\n\nexport const EditCard = observer(props => {\n  const fontSize = '14px'\n  const store = useContext(AccountStore)\n  const showForm = event => {\n    event.preventDefault()\n    store.set('renderCardForm', !toJS(store.renderCardForm))\n  }\n  if (!toJS(store.renderCardForm)) {\n    if (store.customer.billingInfo) {\n      return (\n        <div>\n          <p>{store.customer.billingInfo.name}</p>\n          <p>\n            {store.customer.billingInfo.cardBrand} ending in{' '}\n            {store.customer.billingInfo.cardLast4}\n          </p>\n          <p>\n            Expires{' '}\n            {store.customer.billingInfo &&\n              store.customer.billingInfo.cardExpMonth}\n            /{store.customer.billingInfo.cardExpYear}\n          </p>\n\n          <button className=\"a11y\" onClick={showForm}>\n            Update Card\n          </button>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <p>No Billing Address</p>\n        </div>\n      )\n    }\n  } else {\n    return (\n      <div className={stripeElementsInput}>\n        <StripeProvider apiKey={REACT_APP_STRIPE_KEY}>\n          <Elements fonts={createOptionsElements()}>\n            <CardForm fontSize={fontSize} />\n          </Elements>\n        </StripeProvider>\n      </div>\n    )\n  }\n})\n","import React, { useContext, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { toJS } from 'mobx'\nimport AccountStore from '../../stores/AccountStore'\nimport states from '../../states.json'\nimport {\n  accountSubSectionHeader,\n  Link,\n  poochInput,\n} from '../../styles/AccountInfo.module.scss'\n\n/**\n * EditBilling Observes AccountStore\n * When `Billing Address` is clicked EditBilling revieals a form\n * that updates the billing address when submited. `store.updateBilling()` is called\n * and a `<Notify/>` message is returned on a result.\n *\n */\n\nexport const EditBilling = observer(props => {\n  const store = useContext(AccountStore)\n  const [renderBilling, setRenderBillling] = useState(false)\n\n  //state\n  const showForm = event => {\n    event.preventDefault()\n    setRenderBillling(!renderBilling)\n  }\n\n  const handleChange = event => {\n    store.set(event.target.id, event.target.value)\n  }\n  const updateBilling = async event => {\n    await store.updateBilling()\n    setRenderBillling(!renderBilling)\n  }\n\n  if (!renderBilling) {\n    return (\n      <div>\n        <p className={accountSubSectionHeader}>Billing Address</p>\n        {console.log(store.customer)}\n        {store.customer && (\n          <span>\n            <p>{toJS(store.customer.billingInfo.name)}</p>\n            <p>{toJS(store.customer.billingInfo.address1)}</p>\n            <p>{toJS(store.customer.billingInfo.address2)}</p>\n            <p>\n              {toJS(store.customer.billingInfo.city)}{' '}\n              {toJS(store.customer.billingInfo.state)}{' '}\n              {toJS(store.customer.billingInfo.zipcode)}\n            </p>\n          </span>\n        )}\n        {/*eslint-disable-next-line*/}\n        <a className={Link} onClick={showForm} href=\"\">\n          Edit Billing Address\n        </a>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <div className=\"field-body\" style={{ marginBottom: '.5rem' }}>\n          <div className=\"field\">\n            <p className=\"control\">\n              <lable>First Name</lable>\n              <input\n                className={'input ' + poochInput}\n                type=\"text\"\n                id=\"firstName\"\n                placeholder=\"First Name\"\n                onChange={handleChange}\n              />\n            </p>\n          </div>\n          <div className=\"field\">\n            <p className=\"control\">\n              <lable>Last Name</lable>\n              <input\n                className={'input ' + poochInput}\n                type=\"text\"\n                id=\"lastName\"\n                placeholder=\"Last Name\"\n                onChange={handleChange}\n              />\n            </p>\n          </div>\n        </div>\n        <div className=\"field\">\n          <p className=\"control\">\n            <lable>Address 1</lable>\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"address1\"\n              placeholder=\"Address 1\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field\">\n          <lable>Address 2</lable>\n          <p className=\"control\">\n            <input\n              className={'input ' + poochInput}\n              type=\"text\"\n              id=\"address2\"\n              placeholder=\"Address 2\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field-body\">\n          <div className=\"field\">\n            <p className=\"control\">\n              <lable>State</lable>\n              <select\n                className={poochInput}\n                id=\"state\"\n                placeholder=\"State\"\n                onChange={handleChange}\n                style={{ height: '54px' }}\n              >\n                {states.map(state => (\n                  <option value={state.abbreviation} key={state.abbreviation}>\n                    {state.name}\n                  </option>\n                ))}\n              </select>\n            </p>\n          </div>\n          <div className=\"field\">\n            <lable>City</lable>\n            <p className=\"control\">\n              <input\n                className={'input ' + poochInput}\n                type=\"text\"\n                id=\"city\"\n                placeholder=\"City\"\n                onChange={handleChange}\n              />\n            </p>\n          </div>\n        </div>\n        <div className=\"field\">\n          <p className=\"control\">\n            <lable>Zip</lable>\n            <input\n              className={'input ' + poochInput}\n              type=\"zip\"\n              id=\"zip\"\n              placeholder=\"Zip\"\n              onChange={handleChange}\n            />\n          </p>\n        </div>\n        <div className=\"field is-grouped\">\n          <p className=\"control is-expanded\">\n            <button className={Link} onClick={showForm} href=\"\">\n              Cancel\n            </button>\n          </p>\n          <p className=\"control\" style={{ textAlign: 'right' }}>\n            <button\n              className=\"button btn-orange\"\n              type=\"submit\"\n              onClick={updateBilling}\n            >\n              Update Billing\n            </button>\n          </p>\n        </div>\n      </div>\n    )\n  }\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { EditCard } from './EditCard'\nimport {\n  accountSectionHeader,\n  accountSubSectionHeader,\n} from '../../styles/AccountInfo.module.scss'\nimport { EditBilling } from './EditBillingInfomration'\n\n/**\n * BillingInformation\n * Contains the Lower section of Account Info\n * Allows the user to Edit Billing Address and the card on file.\n */\n\nexport const BillingInformation = observer(props => {\n  return (\n    <div className=\"box\" style={{ background: '#f2f2f2', padding: '1.5em' }}>\n      <h3 className={accountSectionHeader}>Billing Information</h3>\n      <div className=\"columns\">\n        <div className=\"column\">\n          <EditBilling />\n        </div>\n        <div className=\"column\">\n          <p className={accountSubSectionHeader}>Card on File</p>\n          <EditCard />\n        </div>\n      </div>\n    </div>\n  )\n})\n"],"sourceRoot":""}