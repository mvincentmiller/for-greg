{"version":3,"sources":["styles/NavBar.module.scss","components/NavBar.js","components/Account/ResetPassword.js","components/ResetPasswordView.js"],"names":["module","exports","NavBarItem","props","style","minHeight","className","navItem","href","onClick","image","alt","src","width","maxHeight","text","NavBar","observer","store","useContext","AccountStore","useState","burgerActive","setBurgerActive","role","aria-label","maxWidth","margin","aria-expanded","position","zIndex","top","right","aria-hidden","textAlign","customerToken","event","preventDefault","clearSession","ResetPassword","error","setError","password","setPassword","repassword","setRePassword","getParameterByName","name","url","window","location","console","log","replace","results","RegExp","exec","decodeURIComponent","resetPassword","a","resetUrl","errors","hash","setTimeout","onSubmit","marginBottom","type","id","placeholder","onChange","target","value","ResetPasswordView","fontSize"],"mappings":"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","file":"static/js/16.084d09d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navItem\":\"NavBar_navItem__3MGo_\"};","import React, { useContext, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport AccountStore from '../stores/AccountStore'\n\nimport { navItem } from '../styles/NavBar.module.scss'\nimport PropTypes from 'prop-types'\n/**\n * NavBarItem\n * Renders a navbar item from props\n * - props.image\n * - props.href\n * - props.text\n * - props.onClick\n */\nconst NavBarItem = props => (\n  <a\n    style={{\n      minHeight: '80px',\n    }}\n    className={'navbar-item ' + navItem}\n    href={props.href}\n    onClick={props.onClick}\n  >\n    {props.image && (\n      <img\n        alt=\"navigation\"\n        src={props.image}\n        style={{ width: 'auto', maxHeight: '53px' }}\n      />\n    )}\n    {props.text}\n  </a>\n)\n\nNavBarItem.propTypes = {\n  href: PropTypes.string,\n  onClick: PropTypes.func,\n  image: PropTypes.string,\n  text: PropTypes.string,\n}\n\n/**\n * Navbar observes AccountStore\n * Renders each navbar item insidea bluma.io navbar\n * It also handles logic for logined in and logedout states\n *\n * Will colapse into a burger / logo when in mobile mode\n */\nexport const NavBar = observer(props => {\n  const store = useContext(AccountStore)\n\n  const [burgerActive, setBurgerActive] = useState(false)\n\n  const logOut = event => {\n    event.preventDefault()\n    store.clearSession()\n  }\n  ///https:///assets.bulubox.com/assets/bulugroup-logo.png\n  return (\n    <nav\n      className=\"navbar\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n      style={{ maxWidth: '1344px', margin: 'auto' }}\n    >\n      <div className=\"navbar-brand\">\n        <NavBarItem\n          image={'http://cdn.onlinewebfonts.com/svg/img_547.png'}\n          href=\"#\"\n        />\n      </div>\n\n      <button\n        className={'a11y navbar-burger ' + (burgerActive ? 'is-active' : '')}\n        aria-label=\"menu\"\n        aria-expanded=\"false\"\n        onClick={() => {\n          setBurgerActive(!burgerActive)\n        }}\n        style={{\n          position: 'absolute',\n          zIndex: 1001,\n          top: 0,\n          right: 0,\n        }}\n      >\n        <span aria-hidden=\"true\"></span>\n        <span aria-hidden=\"true\"></span>\n        <span aria-hidden=\"true\"></span>\n      </button>\n      <div\n        style={{\n          position: 'relative',\n          top: '-4px',\n          textAlign: 'center',\n        }}\n        className={'navbar-menu ' + (burgerActive ? 'is-active' : '')}\n      >\n        <div className=\"navbar-end\">\n          <NavBarItem text=\"Subscribe\" href=\"#/\" />\n          <NavBarItem text=\"FAQ\" href=\"#/faq\" />\n          {!store.customerToken && <NavBarItem text=\"Log In\" href=\"#/login\" />}\n          {store.customerToken && (\n            <NavBarItem text=\"Log Out\" onClick={logOut} />\n          )}\n          {store.customerToken && (\n            <NavBarItem text=\"My Account\" href=\"#/myaccount\" />\n          )}\n        </div>\n      </div>\n    </nav>\n  )\n})\n\nexport default NavBar\n","import React, { useContext, useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport AccountStore from '../../stores/AccountStore'\n\n/**\n * ResetPassword observes AccountStore\n *\n * ResetPassword is only accessable from a user email.\n * The url peram that is required by ResetPassword is generated by shopify and\n * sent with the ResetPassword email.\n *\n */\n\nexport const ResetPassword = observer(() => {\n  const store = useContext(AccountStore)\n\n  const [error, setError] = useState(false)\n  const [password, setPassword] = useState('')\n  const [repassword, setRePassword] = useState('')\n\n  const getParameterByName = (name, url) => {\n    if (!url) url = window.location\n    console.log(name, url)\n    /* eslint-disable-next-line */\n    name = name.replace(/[\\[\\]]/g, '\\\\$&')\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url)\n    if (!results) return null\n    if (!results[2]) return ''\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '))\n  }\n\n  const resetPassword = async event => {\n    event.preventDefault()\n    if (repassword === password) {\n      var resetUrl = getParameterByName('resetUrl')\n      console.log(resetUrl)\n      const auth = await store.resetPassword(password, resetUrl)\n      if (!auth.errors) {\n        window.location.hash = '/login'\n      }\n    } else {\n      setError(true)\n      setTimeout(() => {\n        setError(false)\n      }, 3000)\n    }\n  }\n\n  return (\n    <form\n      onSubmit={resetPassword}\n      style={{ maxWidth: '400px', margin: 'auto' }}\n    >\n      {error && (\n        <p className=\"has-text-danger\" style={{ marginBottom: '15px' }}>\n          Passwords are not the same!\n        </p>\n      )}\n      <div className=\"field\">\n        <input\n          className=\"input\"\n          type=\"password\"\n          id=\"password\"\n          placeholder=\"Enter a New Password\"\n          onChange={event => setPassword(event.target.value)}\n        />\n      </div>\n      <div className=\"field\">\n        <input\n          className=\"input\"\n          type=\"password\"\n          id=\"repassword\"\n          placeholder=\"Re Enter your Password\"\n          onChange={event => setRePassword(event.target.value)}\n        />\n      </div>\n      <input type=\"submit\" value=\"Reset\" className=\"button is-info\" />\n    </form>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { NavBar } from './NavBar'\nimport { ResetPassword } from './Account/ResetPassword'\n\n/**\n * ResetPasswordView\n *\n * Contains the <ResetPasswrd/> component from /Account\n * Renders this along with the NavBar\n *\n * Returned on `/reset-password`\n */\nexport const ResetPasswordView = observer(() => (\n  <div className=\"container has-text-centered\">\n    <NavBar />\n    <div>\n      <h1 style={{ fontSize: '36px' }}>Reset Your Password</h1>\n      <br />\n      <ResetPassword />\n      <br />\n    </div>\n  </div>\n))\n"],"sourceRoot":""}